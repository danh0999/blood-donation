import React, { useState } from "react";
import styles from "./styles.module.scss";
import { Checkbox, Input, Button, message } from "antd";
import { useDispatch, useSelector } from "react-redux";
import { useNavigate, useLocation } from "react-router-dom";
import { setDonationHistory } from "../../../redux/features/BloodHistorySlice";
import api from "../../../configs/axios";

const questions = [
  "1. Anh/ch·ªã t·ª´ng hi·∫øn m√°u ch∆∞a?",
  "2. Hi·ªán t·∫°i, anh/ ch·ªã c√≥ m·∫Øc b·ªánh l√Ω n√†o kh√¥ng?",
  "3. Tr∆∞·ªõc ƒë√¢y, anh/ch·ªã c√≥ t·ª´ng m·∫Øc m·ªôt trong c√°c b·ªánh: vi√™m gan si√™u vi B, C, HIV, v·∫£y n·∫øn, ph√¨ ƒë·∫°i ti·ªÅn li·ªát tuy·∫øn, s·ªëc ph·∫£n v·ªá, tai bi·∫øn m·∫°ch m√°u n√£o, nh·ªìi m√°u c∆° tim, lupus ban ƒë·ªè, ƒë·ªông kinh, ung th∆∞, hen, ƒë∆∞·ª£c c·∫•y gh√©p m√¥ t·∫°ng?",
  "4. Trong 12 th√°ng g·∫ßn ƒë√¢y, anh/ch·ªã c√≥:",
  "5. Trong 06 th√°ng g·∫ßn ƒë√¢y, anh/ch·ªã c√≥:",
  "6. Trong 01 th√°ng g·∫ßn ƒë√¢y, anh/ch·ªã c√≥:",
  "7. Trong 14 ng√†y g·∫ßn ƒë√¢y, anh/ch·ªã c√≥:",
  "8. Trong 07 ng√†y g·∫ßn ƒë√¢y, anh/ch·ªã c√≥:",
  "9. C√¢u h·ªèi d√†nh cho ph·ª• n·ªØ:",
];

const DonateCheckup = () => {
  const [answers, setAnswers] = useState(
    Array(questions.length).fill({ answer: null, note: "" })
  );

  const dispatch = useDispatch();
  const navigate = useNavigate();
  const location = useLocation();
  const user = useSelector((state) => state.user);

  const { programId, date, locationId } = location.state || {};

  const handleCheckboxChange = (index, value) => {
    const newAnswers = [...answers];
    newAnswers[index].answer = value;
    setAnswers(newAnswers);
  };

  const handleNoteChange = (index, e) => {
    const newAnswers = [...answers];
    newAnswers[index].note = e.target.value;
    setAnswers(newAnswers);
  };

  const handleSubmit = async () => {
    if (!programId || !user?.userID) {
      message.error("Thi·∫øu th√¥ng tin ng∆∞·ªùi d√πng ho·∫∑c ch∆∞∆°ng tr√¨nh.");
      return;
    }

    try {
      const selectedSlotId = 1; // TODO: slot th·∫≠t sau
      const res = await api.post(
        "/appointments",
        {
          slotId: selectedSlotId,
          programId,
          date,
        },
        {
          params: {
            userId: user.userID,
          },
        }
      );

      const appointment = res.data;

      // üîÅ G·ªçi l·∫°i API l·∫•y chi ti·∫øt ƒë·∫ßy ƒë·ªß
      const appointmentDetailRes = await api.get(
        `/appointments/${appointment.id}`
      );
      const appointmentDetail = appointmentDetailRes.data;
      console.log("Set Redux v·ªõi:", {
        id: appointmentDetail.id,
        address: appointmentDetail.address,
        time: appointmentDetail.timeRange,
      });
      dispatch(
        setDonationHistory([
          {
            id: appointmentDetail.id,
            address: appointmentDetail.address || "Kh√¥ng r√µ ƒë·ªãa ƒëi·ªÉm",
            time: appointmentDetail.timeRange || "Kh√¥ng r√µ th·ªùi gian",
          },
        ])
      );

      message.success("ƒêƒÉng k√Ω hi·∫øn m√°u th√†nh c√¥ng!");
      navigate("/user/bloodDonate");
    } catch (error) {
      console.error("L·ªói g·ª≠i appointment:", error);
      message.error("L·ªói khi ƒëƒÉng k√Ω l·ªãch hi·∫øn m√°u.");
    }
  };

  return (
    <div className={styles.container}>
      <h2>Kh·∫£o s√°t tr∆∞·ªõc hi·∫øn m√°u</h2>
      <form className={styles.form}>
        {questions.map((question, index) => (
          <div key={index} className={styles.questionItem}>
            <p className={styles.questionText}>{question}</p>
            <Checkbox.Group
              className={styles.checkboxGroup}
              value={[answers[index].answer]}
              onChange={(checkedValues) =>
                handleCheckboxChange(index, checkedValues[0])
              }
            >
              <Checkbox value="yes">C√≥</Checkbox>
              <Checkbox value="no">Kh√¥ng</Checkbox>
            </Checkbox.Group>
            <Input.TextArea
              rows={2}
              placeholder="Ghi ch√∫ (n·∫øu c√≥)"
              value={answers[index].note}
              onChange={(e) => handleNoteChange(index, e)}
            />
          </div>
        ))}

        <Button type="primary" onClick={handleSubmit} style={{ marginTop: 24 }}>
          G·ª≠i phi·∫øu kh·∫£o s√°t
        </Button>
      </form>
    </div>
  );
};

export default DonateCheckup;
