import React, { useState } from "react";
import styles from "./styles.module.scss";
import { Checkbox, Input, Button } from "antd";
import { useDispatch, useSelector } from "react-redux";
import { useNavigate, useLocation } from "react-router-dom";
import {
  setDonationHistory,
  setCurrentAppointment,
} from "../../../redux/features/bloodHistorySlice";
import api from "../../../configs/axios";
import { toast } from "react-toastify";
import ScrollToTopButton from "../../../components/ScrollToTopButton/ScrollToTopButton";

const questionList = [
  {
    text: "1. Anh/ch·ªã t·ª´ng hi·∫øn m√°u ch∆∞a?",
    options: ["C√≥", "Kh√¥ng"],
    isSingle: true,
  },

  {
    text: "2. Hi·ªán t·∫°i, anh/ch·ªã c√≥ m·∫Øc b·ªánh l√Ω n√†o kh√¥ng?",
    options: ["C√≥", "Kh√¥ng"],
    hasNote: true,
    isSingle: true,
  },

  {
    text: "3. Tr∆∞·ªõc ƒë√¢y, anh/ch·ªã c√≥ t·ª´ng m·∫Øc m·ªôt trong c√°c b·ªánh ...?",
    options: ["C√≥", "Kh√¥ng", "B·ªánh kh√°c"],
    hasNote: true,
    isSingle: true,
  },

  {
    text: "4. Trong 12 th√°ng g·∫ßn ƒë√¢y, anh/ch·ªã c√≥:",
    options: [
      "Kh·ªèi b·ªánh sau khi m·∫Øc c√°c b·ªánh: s·ªët r√©t, giang mai, lao, vi√™m n√£o ‚Äì m√†ng n√£o, u·ªën v√°n, ph·∫´u thu·∫≠t ngo·∫°i khoa?",
      "ƒê∆∞·ª£c truy·ªÅn m√°u ho·∫∑c ch·∫ø ph·∫©m m√°u?",
      "Ti√™m V·∫Øc-xin?",
      "Kh√¥ng",
    ],
    hasNote: true,
  },

  {
    text: "5. Trong 06 th√°ng g·∫ßn ƒë√¢y, anh/ch·ªã c√≥:",
    options: [
      "Kh·ªèi b·ªánh sau khi m·∫Øc b·ªánh nhi·ªÖm tr√πng, s·ªët xu·∫•t huy·∫øt, vi√™m x∆∞∆°ng, vi√™m tu·ª∑,...?",
      "S·ª•t c√¢n kh√¥ng r√µ nguy√™n nh√¢n?",
      "N·ªïi h·∫°ch k√©o d√†i?",
      "Th·ª±c hi·ªán th·ªß thu·∫≠t y t·∫ø?",
      "XƒÉm, x·ªè tai, l·ªó m≈©i?",
      "S·ª≠ d·ª•ng ma tu√Ω?",
      "Ti·∫øp x√∫c m√°u ng∆∞·ªùi b·ªánh?",
      "S·ªëng chung v·ªõi ng∆∞·ªùi b·ªã vi√™m gan si√™u vi B?",
      "Quan h·ªá v·ªõi ng∆∞·ªùi m·∫Øc b·ªánh truy·ªÅn nhi·ªÖm?",
      "Quan h·ªá ƒë·ªìng gi·ªõi?",
      "Kh√¥ng",
    ],
  },

  {
    text: "6. Trong 01 th√°ng g·∫ßn ƒë√¢y, anh/ch·ªã c√≥:",
    options: [
      "M·∫Øc b·ªánh vi√™m h√¥ h·∫•p, vi√™m da, vi√™m ph·∫ø qu·∫£n,...?",
      "ƒêi v√πng c√≥ d·ªãch b·ªánh l∆∞u h√†nh (s·ªët r√©t, s·ªët xu·∫•t huy·∫øt, Zika,...)?",
      "Kh√¥ng",
    ],
  },

  {
    text: "7. Trong 14 ng√†y g·∫ßn ƒë√¢y, anh/ch·ªã c√≥:",
    options: [
      "B·ªã c√∫m, c·∫£m l·∫°nh, ho, nh·ª©c ƒë·∫ßu, s·ªët, ƒëau h·ªçng?",
      "Kh√¥ng",
      "Kh√°c (c·ª• th·ªÉ)",
    ],
    hasNote: true,
  },

  {
    text: "8. Trong 07 ng√†y g·∫ßn ƒë√¢y, anh/ch·ªã c√≥:",
    options: [
      "D√πng thu·ªëc kh√°ng sinh, kh√°ng vi√™m, Aspirin, Corticoid?",
      "Kh√¥ng",
      "Kh√°c (c·ª• th·ªÉ)",
    ],
    hasNote: true,
  },

  {
    text: "9. C√¢u h·ªèi d√†nh cho ph·ª• n·ªØ:",
    options: [
      "Hi·ªán ch·ªã ƒëang mang thai ho·∫∑c nu√¥i con d∆∞·ªõi 12 th√°ng tu·ªïi?",
      "Ch·∫•m d·ª©t thai k·ª≥ trong 12 th√°ng g·∫ßn ƒë√¢y (s·∫£y thai, ph√° thai, thai ngo√†i t·ª≠ cung)?",
      "Kh√¥ng",
    ],
    isSingle: true,
  },
];

const DonateCheckup = () => {
  const [answers, setAnswers] = useState(
    questionList.map(() => ({ answer: [], note: "" }))
  );

  const dispatch = useDispatch();
  const navigate = useNavigate();
  const location = useLocation();
  const user = useSelector((state) => state.user);

  const { programId, date, cityId, slotId } = location.state || {};

  /* ---- a. X·ª≠ l√Ω khi tick √¥ ---- */
  const handleCheckboxChange = (qIndex, option) => {
    const updated = [...answers];
    const selected = updated[qIndex].answer;
    const isSingle = questionList[qIndex].isSingle;

    if (isSingle) {
      // ch·ªâ duy nh·∫•t 1 l·ª±a ch·ªçn
      updated[qIndex].answer = selected.includes(option) ? [] : [option];
    } else {
      // multi‚Äëselect
      updated[qIndex].answer = selected.includes(option)
        ? selected.filter((o) => o !== option)
        : [...selected, option];
    }
    setAnswers(updated);
  };

  const handleNoteChange = (qIndex, e) => {
    const updated = [...answers];
    updated[qIndex].note = e.target.value;
    setAnswers(updated);
  };

  /* ---- b. G·ª≠i form ---- */
  const handleSubmit = async () => {
    if (!programId || !user?.userID || !slotId) {
      toast.error("Thi·∫øu th√¥ng tin ng∆∞·ªùi d√πng, ch∆∞∆°ng tr√¨nh ho·∫∑c khung gi·ªù.");
      return;
    }

    const payload = {
      slotId,
      programId,
      cityId,
      date,
      answer1: answers[0].answer.join(", "),
      answer2:
        answers[1].answer.join(", ") +
        (answers[1].note ? `: ${answers[1].note}` : ""),
      answer3:
        answers[2].answer.join(", ") +
        (answers[2].note ? `: ${answers[2].note}` : ""),
      answer4:
        answers[3].answer.join(", ") +
        (answers[3].note ? `: ${answers[3].note}` : ""),
      answer5: answers[4].answer.join(", "),
      answer6: answers[5].answer.join(", "),
      answer7:
        answers[6].answer.join(", ") +
        (answers[6].note ? `: ${answers[6].note}` : ""),
      answer8:
        answers[7].answer.join(", ") +
        (answers[7].note ? `: ${answers[7].note}` : ""),
      answer9: answers[8].answer.join(", "),
    };

    try {
      const { data: res } = await api.post("/appointments", payload, {
        params: { userId: user.userID },
      });
      const detail = (await api.get(`/appointments/${res.id}`)).data;

      const data = {
        id: detail.id,
        address: detail.address || "Kh√¥ng r√µ ƒë·ªãa ƒëi·ªÉm",
        time: detail.timeRange || "Kh√¥ng r√µ th·ªùi gian",
        status: detail.status,
      };
      dispatch(setDonationHistory([data]));
      dispatch(setCurrentAppointment(data));

      toast.success("üéâ ƒêƒÉng k√Ω hi·∫øn m√°u th√†nh c√¥ng!");
      navigate("/user/bloodDonate");
    } catch (error) {
      if (
        error.response?.data?.message?.includes("already have") ||
        error.response?.data?.error?.includes("already have")
      ) {
        toast.error("B·∫°n ch·ªâ c√≥ th·ªÉ ƒëƒÉng k√Ω 1 ƒë∆°n hi·∫øn m√°u t·∫°i 1 th·ªùi ƒëi·ªÉm");

        try {
          const res = await api.get(`/appointments/by-user`, {
            params: { userId: user.userID },
          });

          const appointment = res.data.find((a) => a.status === "PENDING");

          if (appointment) {
            const detail = (await api.get(`/appointments/${appointment.id}`))
              .data;

            const data = {
              id: detail.id,
              address: detail.address || "Kh√¥ng r√µ ƒë·ªãa ƒëi·ªÉm",
              time: detail.timeRange || "Kh√¥ng r√µ th·ªùi gian",
            };

            dispatch(setDonationHistory([data]));
            dispatch(setCurrentAppointment(data));
            navigate("/user/bloodDonate");
          }
        } catch {
          toast.error("‚ùå Kh√¥ng th·ªÉ l·∫•y l·∫°i l·ªãch h·∫πn.");
        }
      } else {
        toast.error(
          "B·∫°n ch·ªâ ƒë∆∞·ª£c ƒë·∫∑t l·ªãch sau √≠t nh·∫•t 10 ng√†y k·ªÉ t·ª´ l·∫ßn hi·∫øn m√°u g·∫ßn nh·∫•t"
        );
      }
    }
  };

  /* ---- c. Render ---- */
  return (
    <div className={styles.container}>
      <h2>Kh·∫£o s√°t tr∆∞·ªõc hi·∫øn m√°u</h2>

      <form className={styles.form}>
        {questionList.map((q, index) => (
          <div key={index} className={styles.questionItem}>
            <p className={styles.questionText}>{q.text}</p>

            {/* √¥ vu√¥ng lu√¥n, nh∆∞ng gi·ªõi h·∫°n tick n·∫øu isSingle */}
            <div className={styles.checkboxGroup}>
              {q.options.map((opt, optIdx) => (
                <Checkbox
                  key={optIdx}
                  checked={answers[index].answer.includes(opt)}
                  onChange={() => handleCheckboxChange(index, opt)}
                >
                  {opt}
                </Checkbox>
              ))}
            </div>

            {q.hasNote && (
              <Input.TextArea
                rows={2}
                placeholder="Ghi ch√∫ th√™m (n·∫øu c√≥)"
                value={answers[index].note}
                onChange={(e) => handleNoteChange(index, e)}
              />
            )}
          </div>
        ))}

        <Button type="primary" onClick={handleSubmit} style={{ marginTop: 24 }}>
          G·ª≠i phi·∫øu kh·∫£o s√°t
        </Button>
      </form>
      <ScrollToTopButton />
    </div>
  );
};

export default DonateCheckup;
