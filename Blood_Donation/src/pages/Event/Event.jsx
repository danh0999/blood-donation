// Event.jsx
import React, { useEffect, useState } from "react";
import styles from "./styles.module.scss";
import { Card, message } from "antd";
import { Button } from "../../components/Button/Button";
import { IoMdTime } from "react-icons/io";
import { CiLocationOn } from "react-icons/ci";
import { MdOutlineDescription } from "react-icons/md";
import { EventDetail } from "../../components/EventDetail/EventDetail";
import { useLocation } from "react-router-dom";
import api from "../../configs/axios";

export const Event = () => {
  const { container, title, description, list, card, iconText } = styles;
  const [selectedEvent, setSelectedEvent] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [programs, setPrograms] = useState([]);
  const [addresses, setAddresses] = useState([]);
  const [slots, setSlots] = useState([]);
  const [selectedDate, setSelectedDate] = useState(null);
  const location = useLocation();

  const handleShowDetail = (event) => {
    const matchedSlots = slots.filter((s) => event.slotIds?.includes(s.slotID));
    const addressName = getAddressName(event.addressId);
    const enrichedEvent = {
      ...event,
      slots: matchedSlots,
      address: addressName,
      selectedDate: selectedDate,
    };
    setSelectedEvent(enrichedEvent);
    setIsModalOpen(true);
  };

  const fetchPrograms = async (start, end) => {
    try {
      let res;
      if (start) {
        res = await api.get(
          `/programs/search-range?startDate=${start}&endDate=${end || ""}`
        );
      } else {
        res = await api.get("/programs");
      }
      setPrograms(res.data);
    } catch (error) {
      console.error(error);
      message.error("L·ªói khi t·∫£i danh s√°ch ch∆∞∆°ng tr√¨nh");
    }
  };

  const fetchSlots = async () => {
    try {
      const res = await api.get("/slots");
      setSlots(res.data);
    } catch (error) {
      console.error(error);
      message.error("L·ªói khi t·∫£i danh s√°ch th·ªùi gian");
    }
  };

  const fetchAddresses = async () => {
    try {
      const res = await api.get("/addresses");
      setAddresses(res.data);
    } catch (error) {
      console.error(error);
      message.error("Kh√¥ng th·ªÉ t·∫£i ƒë·ªãa ch·ªâ.");
    }
  };

  const getAddressName = (addressId) => {
    const found = addresses.find((a) => a.id === addressId);
    return found?.name || "Kh√¥ng x√°c ƒë·ªãnh";
  };

  const getTimeRange = (slotIds) => {
    const ranges = slotIds
      .map((id) => {
        const slot = slots.find((s) => s.slotID === id);
        return slot ? `${slot.start} - ${slot.end}` : null;
      })
      .filter(Boolean);
    return ranges.join(", ");
  };

  useEffect(() => {
    const queryParams = new URLSearchParams(location.search);
    const start = queryParams.get("startDate");
    const end = queryParams.get("endDate");

    if (start) {
      setSelectedDate(start); // ‚¨Ö d√πng khi chuy·ªÉn sang Schedule.jsx
    }

    fetchPrograms(start, end);
    fetchSlots();
    fetchAddresses();
  }, [location.search]);

  return (
    <div className={container}>
      <h2 className={title}>Ch∆∞∆°ng tr√¨nh hi·∫øn m√°u</h2>
      <p className={description}>
        D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c ch∆∞∆°ng tr√¨nh hi·∫øn m√°u do b·ªánh vi·ªán t·ªï ch·ª©c.
        B·∫°n c√≥ th·ªÉ theo d√µi l·ªãch tr√¨nh v√† tham gia khi ph√π h·ª£p.
      </p>

      <div className={list}>
        {programs.map((event) => (
          <Card key={event.id} title={event.proName} className={card}>
            <div className={iconText}>
              <span className={styles.label}>
                <IoMdTime />
                Th·ªùi gian:
              </span>
              <span>{getTimeRange(event.slotIds)}</span>
            </div>
            <div className={iconText}>
              <span className={styles.label}>üìÖ Ng√†y b·∫Øt ƒë·∫ßu:</span>
              <span>{event.startDate}</span>
            </div>
            <div className={iconText}>
              <span className={styles.label}>üóìÔ∏è Ng√†y k·∫øt th√∫c:</span>
              <span>{event.endDate}</span>
            </div>
            <div className={iconText}>
              <span className={styles.label}>
                <CiLocationOn />
                ƒê·ªãa ƒëi·ªÉm:
              </span>
              <span>{getAddressName(event.addressId)}</span>
            </div>
            <div className={iconText}>
              <span className={styles.label}>
                <MdOutlineDescription />
                M√¥ t·∫£:
              </span>
              <span>{event.description}</span>
            </div>

            <Button
              content="Xem chi ti·∫øt"
              onClick={() => handleShowDetail(event)}
            />
          </Card>
        ))}
      </div>

      {selectedEvent && (
        <EventDetail
          open={isModalOpen}
          onClose={() => setIsModalOpen(false)}
          event={selectedEvent}
          selectedDate={selectedDate} // üëà truy·ªÅn sang Schedule.jsx
        />
      )}
    </div>
  );
};
